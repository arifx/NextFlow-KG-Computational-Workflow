# -*- coding: utf-8 -*-
"""ENOSE-PROCESS-KG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1scRHstH3Jm7SkGKuW5XomV5ZkWY4tJ0L
"""

import pandas as pd #for handling csv and csv contents
from rdflib import Graph, Literal, RDF, URIRef, Namespace, BNode, OWL,RDFS #basic RDF handling
from rdflib.namespace import FOAF , XSD #most common namespaces
import urllib.parse #for parsing strings to URI's

import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--input", dest="input_path", help="Path to input file")
parser.add_argument("--output", dest="output_path", help="Path to output file")
args = parser.parse_args()
input_path = args.input_path
output_path = args.output_path

df = pd.read_excel(input_path)
cols = df.columns
new_cols = [column.replace(" ", "_") for column in df.columns]
rename_cols = dict(zip(cols, new_cols))
df.rename(columns=rename_cols, inplace=True)

saref = Namespace('https://saref.etsi.org/core/')
fsmon = Namespace('https://purl.archive.org/purl/fsmon/Ontology#')
chebi = Namespace("http://purl.obolibrary.org/obo/CHEBI_")
sio = Namespace("http://semanticscience.org/resource/")
ncit = "http://purl.obolibrary.org/obo/NCIT_"
foodon = "http://purl.obolibrary.org/obo/FOODON_"
sosa = Namespace("http://www.w3.org/ns/sosa/")
om2 = Namespace("http://www.ontology-of-units-of-measure.org/resource/om-2/ViableCount")


dataset_name = "enose_chickenthigh_air.xlsx"
folder = "Spoilage_chicken_thigh_gt/"
file_uri = folder+dataset_name
g = Graph()
# theconfig={'uri':"neo4j://localhost:7474", 'auth':{'neo4j','Ly990303!'}}
# g.open(theconfig, create = False)
g.bind("saref", saref)
g.bind("fsmon", fsmon)
g.bind('chebi', chebi)
g.bind("sio", sio)
g.bind("ncit", ncit)
g.bind("foodon", foodon)
g.bind("sosa", sosa)
g.bind("om2", om2)

g.add((URIRef(fsmon+dataset_name), RDF.type, URIRef(sio+"Dataset")))
g.add((URIRef(fsmon+dataset_name), URIRef(fsmon+"name"), Literal(str(dataset_name))))
g.add((URIRef(fsmon+dataset_name), URIRef(sio+"SIO_000061"), URIRef(fsmon+file_uri)))
g.add((URIRef(fsmon+file_uri), RDF.type, URIRef(ncit+"NCIT_C42778")))
g.add((URIRef(fsmon+file_uri), URIRef(fsmon+"name"), Literal(str(file_uri))))
g.add((URIRef(fsmon+"chicken_thigh"), RDF.type, URIRef(foodon+"03400361")))


g.add((URIRef(fsmon+'LY2-G'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16134')))
g.add((URIRef(fsmon+'LY2-G'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'17245')))
g.add((URIRef(chebi+'16134'), RDFS.label, Literal("Ammonia")))
g.add((URIRef(chebi+'17245'), RDFS.label, Literal("Carbon monoxide")))


g.add((URIRef(fsmon+'LY2-LG'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'63248')))
g.add((URIRef(chebi+'63248'), RDFS.label, Literal("oxidising agent")))

g.add((URIRef(fsmon+'LY2-AA'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16236')))
g.add((URIRef(chebi+'16236'), RDFS.label, Literal("Ethanol")))

g.add((URIRef(fsmon+'LY2-GH'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16134')))
g.add((URIRef(chebi+'16134'), RDFS.label, Literal("Ammonia")))

g.add((URIRef(fsmon+'LY2-gCTL'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16136')))
g.add((URIRef(chebi+'16136'), RDFS.label, Literal("Hydrogen_Sulphide")))

g.add((URIRef(fsmon+'LY2-gCT'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'32879')))
g.add((URIRef(fsmon+'LY2-gCT'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'37808')))
g.add((URIRef(chebi+'32879'), RDFS.label, Literal("propane")))
g.add((URIRef(chebi+'37808'), RDFS.label, Literal("butane")))

g.add((URIRef(fsmon+'T30/1'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'17883')))
g.add((URIRef(chebi+'17883'), RDFS.label, Literal("hydrogen chloride")))
17883
g.add((URIRef(fsmon+'P10-1'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'24632')))
g.add((URIRef(chebi+'24632'), RDFS.label, Literal("hydrocarbon")))

g.add((URIRef(fsmon+'P10-2'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16183')))
g.add((URIRef(chebi+'16183'), RDFS.label, Literal("Methane")))

g.add((URIRef(fsmon+'P40-1'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'30239')))
g.add((URIRef(chebi+'30239'), RDFS.label, Literal("fluorine")))

g.add((URIRef(fsmon+'T70-2'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'33655')))
g.add((URIRef(chebi+'33655'), RDFS.label, Literal("aromatic compound")))

g.add((URIRef(fsmon+'PA-2'), URIRef(saref+'relatesToProperty'), URIRef(chebi+'16134')))
g.add((URIRef(chebi+'16134'), RDFS.label, Literal("Ammonia")))


for index, row in df[["Sample_ID"]].iterrows(): #iter rows of first column, get sampleId
    sample = row['Sample_ID']
    feature = sample.split("_")
    temperature = feature[0]
    time = feature[1]
    aId = feature[2]
    batch_n = feature[3]
  
    g.add((URIRef(fsmon+sample), RDF.type, URIRef(sosa+"Sample")))  #example:
    g.add((URIRef(fsmon+dataset_name), URIRef(fsmon+"hasSample"), URIRef(fsmon+sample)))  #example: dataset_name hasSample 0C_0h_a_b1
    g.add((URIRef(fsmon+sample), RDF.type, URIRef(sosa+"Sample")))  #example: 0C_0h_a_b1 is type of Sample
    g.add((URIRef(fsmon+sample), URIRef(fsmon+"hasTemperature"), Literal(temperature)))
    g.add((URIRef(fsmon+sample), URIRef(fsmon+"hasBatchNumber"), Literal(batch_n)))
    g.add((URIRef(fsmon+sample), URIRef(fsmon+"time"), Literal(time)))
    g.add((URIRef(fsmon+sample), URIRef(fsmon+"hasAdditionalID"), Literal(aId)))


    for col_index, column in enumerate(df.columns[1:]): # get column name
        if column == "TVC":
           g.add((URIRef(fsmon+row['Sample_ID']), URIRef(saref+"hasMeasurement"), URIRef(om2))) #Mean:
           g.add((URIRef(om2), RDF.type, URIRef(saref+"Measurement"))) 
        else:
            g.add((URIRef(fsmon+row['Sample_ID']), URIRef(saref+"hasMeasurement"), URIRef(fsmon+column))) 
            g.add((URIRef(fsmon+column), RDF.type, URIRef(saref+"Measurement")))


g.serialize(destination=output_path, format='xml')